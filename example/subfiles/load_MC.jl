function clear_marketing(mdl::Model)
    
    Œ® = mdl.Œ®
    R,R·¥∏ = mdl.Prices[ 1:2 ]
    T = mdl.DR
    œâ, œÑ = mdl.AddPrices[ 1:2 ]
    grids = mdl.GridDef.Grids[ 1 : (length(mdl.GridDef.Grids)√∑2) ]
    push!(grids,mdl.GridDef.Grids[end])
    grid_names = mdl.GridDef.VarNames[ 1 : (length(mdl.GridDef.Grids)√∑2) ]
    grid_names = (grid_names...,mdl.GridDef.VarNames[end])
    (d‚ÇÅ, l‚ÇÅ, Œª·µ¢) = (1, 2, 3)
    #     #Aggregate
    L·¥∞ = 0.0
    L= 0.0 # Debt before defaults
    V = 0.0 #Claimed wages
    V·¥∞ = 0.0 #Claimed deposits
    D = 0.0 # Deposits before defaults
    
    cube = CartesianIndices( tuple( length.(grids)...))
    
    for idx = eachindex(T)
        
        if (T[idx] == 0)
            
            L·¥∞ += Œ®[idx] * grids[l‚ÇÅ][ cube[idx][l‚ÇÅ] ]
            V·¥∞  += Œ®[idx] * grids[d‚ÇÅ][ cube[idx][d‚ÇÅ] ]
            V  += Œ®[idx] * (grids[Œª·µ¢][ cube[idx][Œª·µ¢] ] == 1) * ( ( ( 1 - œÑ ) * œâ ) - œê)
            
        else
            
            #Tutaj pomy≈õlec czy nie powinno byƒá  T[idx] - sprawdziƒá z r√≥wnaniami poni≈ºej 
            L  += Œ®[idx] * grids[l‚ÇÅ][ cube[T[idx]][l‚ÇÅ] ]
            D  += Œ®[idx] * grids[d‚ÇÅ][ cube[T[idx]][d‚ÇÅ] ]
            
        end
        
    end
    
    V += V·¥∞

    B = D - (L - L·¥∞) - V
    
    #     # Solve et Coalgua
    function sys_of_eqs(Rates::Vector{T}) where T<:Real
        
        R, R·¥∏ = Rates
        F = zeros(2)
        # Commercial Banks:
        F[1] = (L - L·¥∞) * R·¥∏  +  ( L‚Çõ * ( œÅ - 1 )  +  B  -  ( D - V·¥∞ )*œÅ ) * R  + V 
        # Central Bank:
        F[2] = (œÅ * ( R/ùúã ) ) * ( D - V·¥∞ )  +  ((1 + R * (1-œÅ) )^(-1))  -  (L - L·¥∞) * Œ¥·∂† * ( R·¥∏/ùúã )  +  (L - (L - L·¥∞) * (1 - Œ¥·∂†) ) - (V - V·¥∞) - D - 1
        
        return(F)
        
    end
    
    function mx_of_J(Rates::Vector{T}) where T<:Real
        
        R, R·¥∏ = Rates
        J = zeros(2,2)
        J[1,1] = ( L‚Çõ * ( œÅ - 1 )  +  B  -  ( D - V·¥∞ )*œÅ )
        J[2,1] = (œÅ /ùúã)  * D - ( R^(-2) ) 
        J[1,2] = (œÅ * ( 1/ùúã ) ) * ( D - V·¥∞ )  -  (1 - œÅ) / ((1 + R * (1-œÅ) )^2)
        J[2,2] = (L - L·¥∞) * Œ¥·∂† * ( 1/ùúã )
        return(J)
        
    end  
    
    # Rates = nlsolve(sys_of_eqs, mx_of_J, [R,R·¥∏], method = :newton).zero
    Rates = nlsolve(sys_of_eqs, [R,R·¥∏], method = :newton).zero
    return(Rates)
    
end